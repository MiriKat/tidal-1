d1
$ sometimesBy (1/8) (98<~)
$ sometimesBy (1/7) (slow 8)
$ sometimesBy (1/6) (iter 8)
$ sometimesBy (1/5) (spread _fast [1,1,1,1,1])
$ spaceOut (map (1/) [1..20])
$ degradeBy 0.5
$ stack [
slow 1 $ (65 <~) $ s "{rnb:17(2,11,5)}%1" # pan (choose [1,0.75,0.5,0.25,0]) # cut (choose [1,2]),
slow 8 $ (27 <~) $ s "{sbu:21(3,11,3)}%2" # pan (choose [1,0.75,0.5,0.25,0]) # cut (choose [2,3]),
slow 8 $ (97 <~) $ s "{rnb:40(4,11,7)}%3" # pan (choose [1,0.75,0.5,0.25,0]) # cut (choose [3,4]),
slow 8 $ (16 <~) $ s "{gab:4(2,11,6)}%2" # pan (choose [1,0.75,0.5,0.25,0]) # cut (choose [1,4]) # up (-12) # shape 0.9,
slow 8 $ (48 <~) $ s "{srg:54(3,11,9)}%2" # pan (choose [1,0.75,0.5,0.25,0]) # cut (wchoose [1,1,2] [0,2,4]) # speed (choose[-1,1,1,1]),
slow 12 $ (39 <~) $ s "{bass1:0(3,11,2)}&2" # pan (choose [1,0.5,0]) # cut (choose [1,3]) # up (-9) # shape 0.7 #hpf 200,
slow 12 $ (51 <~) $ s "{rnb:6(4,11,3)}%2" # pan (scale 1.0 0.0 $ rand) # cut (choose [1,2,3,4,5]),
slow 4 $ (11 <~) $ s "{srr:12(4,11,5)~}%2" # pan (scale 0.0 0.5 $ rand) # cut (choose [1,3,5]) # end 0.36,
slow 4 $ (84 <~)$ s "{dx7(4,11,9)~}%2" # pan (scale 0.5 1.0 $ rand) # cut (choose [0,2,4,5]) # up (wchoose[8,4,4,1] [-12,0,12,24]) # n (choose [2,4])
]
# rel (slow 16 $ scale 0 0.5 $ sine)
# orbit 1
# delay (1/16)
# delayfb 1
# delayt (discretise (1/2) $ slow 16 $ scale (1/48) (1/9999) $ rand)
# gain 8
# nudge (slow 17 $ scale 0 3 $ sine)
# hpf (slow 18 $ scalex 20 200 $ sine)

let wchoose weights values = choose $ concatMap (\x -> replicate (fst x) (snd x)) (zip weights values)

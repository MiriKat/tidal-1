d1
$ spreadChoose _slow [1,1.5,2,2.5,3,3.5,4]
$ degradeBy (1/19)
$ spread slow [1,1.5,2,2.5,3,3.5,4,4.5,5,5.5,6]
$ spread fast [1,1.5,2,2.5,3,3.5]
$ s (randcat["bch*8","sbu*9"])
# n (slow 0.1 $ choose [0..126])
# comb (slow 0.11 $ rand)
# nudge (slow 19 $ sine)
# pan (slow 17 $ saw)
# gain (slow 0.12 $ scale 1 2 $ rand)
# up (slow 0.18 $ choose [-18,-17.5,-17,-16.5,-16,-15.5,
  -15,-14.5,-14,-13.5,-13,-12.5,-12,-11.5,-11,-10.5,-10,
  -9.5,-9,-8.5,-8,-7.5,-7,-6.5-6,-5.5-5,-4.5,-4,-3.5,-3,
  -2.5,-2,-1.5,-1,-0.5,0])
# scram (slow 0.23 $ rand)
# accelerate (slow 0.22 $ scale (-0.03125) 0.03125 $ rand)
# cut (slow 0.21 $ wchoose [21,3][0,1])
# rel (slow 0.24 $ scale 1 3 $ rand)§§§
# hpf (slow 0.25 $ scale 20 400 $ rand)
# hbrick (slow 0.26 $ scale 0 0.01 $ rand)
# att (slow 0.27 $ scale 0 3 $ rand)
# begin (slow 0.28 $ rand)
# end (slow 0.29 $ scale 0 4 $ rand)
# hold (slow 0.3 $ scale 1 3 $ rand)
# freeze (slow 0.31 $ wchoose [4,1][0,1])

d2
$ sometimesBy (1/6)(spread _slow [1,1,1,1,1])
$ degradeBy 0.13
$ spreadChoose _fast [1,1.5..3]
$ slow (discretise (1/5) $ choose [0.5,1..11])
$ sound "[srg:1 srg:1*3 srg:1*2 srg:1*2 srg:1 ~ ~ prr:5]"
# rel (slow 0.1 $ scale 0.125 1 $ rand)
# nudge (slow 16 $ scale 0 0.5 $ sine)
# scram (slow 19 $ sine)
# cut (slow 0.11 $ choose[0,1])
# up (slow 0.12 $ scale (-12) 6  $ rand)
# gain (slow 23 $ scale 0.5 2 $ sine)
# freeze (slow 0.31 $ wchoose[4,1][0,1])
# shape 0.9
# lpf (slow 27 $ scale 2000 20000 $ sine)
# delay 0
# delayfb 1
# delayt (slow 32 $ scale (1/132) (1/125) $ saw)

import Sound.Tidal.SpectralTricks

let wchoose weights values = choose $ concatMap (\x ->replicate (fst x) (snd x)) (zip weights values)

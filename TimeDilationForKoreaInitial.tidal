d1
$ sometimesBy 0.45 (spread _slow [2,2,2,4,4])
$ sometimesBy 0.5 (slow 2)
$ stack[
degradeBy 0.4
$ sometimesBy 0.05 (2<~)
$ fast 2
$ sometimesBy 0.1 (iter 2)
$ spreadChoose _fast [1..2]
$ s (randcat["tuu*8?","srg*7?","sbu*6?"])
# pan (slow 0.1 $ rand)
# n (discretise (1/7) $ slow 0.11 $ choose [0..99])
# up (discretise (1/8) $ slow 0.12 $ scale (-16) 16 $ rand)
# gain 4
# nudge (discretise (1/32) $ slow 0.13 $ scale 0 3 $ rand)
# shape (slow 0.14 $ rand)
# delay (slow 160 $ scale 0.95 1 $ sine)
# delayfb 1
# delayt (discretise (1/56) $ slow 0.15 $
choose [1/32,1/64,1/128,1/256,1/512]
/ wchoose[9,8,7,6,5,4,3,2,1] [1..9]
* wchoose [12,11,10,9,8,7,6,5,4,3,2,1] [1,1.4,2.3,3.6,4.7,5.9,6.2,7.3,8.5,9.7,10.1,11.7]
* (slow 56 $ scale 1 2 $ sine))
# rel (slow 133 $ scale 0 2 $ saw),
degradeBy 0.4
$ sometimesBy 0.05 (2<~)
$ fast 2
$ sometimesBy 0.1 (iter 2)
$ spreadChoose _fast [1..2]
$ s (randcat["bch*5?"])
# pan (slow 0.15 $ rand)
# n (discretise (1/9) $ slow 0.16 $ choose [0..8])
# up (discretise (1/11) $ slow 0.17 $ scale (-18) 0 $ rand)
# gain 4
# att (slow 0.18 $ scale 2 4 $ rand)
# hpf (discretise (1/9) $ slow 0.19 $ wchoose [5,4,3,2,1] [20,40,160,320,640])
]

let wchoose weights values = choose $ concatMap (\x -> replicate (fst x) (snd x)) (zip weights values)













































d1
$ slow 2
$ sometimesBy (1/3) (spreadChoose _slow [3..29])
$ sometimesBy (1/5) (iter 4)
$ sometimesBy (1/4) (striate (wchoose [1,2,3,4,5,6,7] [64,32,16,8,4,2,1]))
$ slow 3
$ sometimesBy 0.5 (spread _slow [2,2,2,2,2,4])
$ spreadChoose fast [1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2]
$ stack [
iter 2
$ fast 4
$ s "srg"
# up (discretise (1/8) $ slow 0.1 $ choose [0..12])
# shape 0.9
# pan (slow 0.11 $ rand)
# loop 28
# nudge (slow 32 $ scale 0 2 $ sine)
# cut 1,
fast 1.25
$ s "sbu:3*9?"
# up (slow 0.12 $ choose [-12..24])
# pan (slow 36 $ sine)
# gain 3
# hpf (slow 48 $ scale 20 10000 $ sine)
# nudge (slow 41 $ scale 0 3 $ sine),
s "pmb"
# n (slow 0.13 $ choose [0..9])
# nudge (slow 9 $ scale 0 4 $ saw),
fast 2.6
$ degradeBy 0.25 
$ s "tuu(3,8)"
# n (slow 0.14 $ choose [0..22])
# shape 0.9
# pan (slow 13 saw)
# speed 2
# gain (slow 19 $ scale 1 2 $ sine)
# up (slow 0.15 $ wchoose [9,8,4,2,1][0,-3,-6,-9,-12])
# cut 2
]
# delay (slow 75 $ sine)
# delayfb 1
# delayt (discretise (1/2) $ slow 0.14 $ scale (5/1444428) (2/456) $ rand)

let wchoose weights values = choose $ concatMap (\x -> replicate (fst x) (snd x)) (zip weights values)

d1 
$ stack[
sometimesBy 0.125 (spread _slow [1,1,1])
$ sometimesBy 0.23 (iter 2)
$ sometimesBy 0.621 (slow 3)
$ fast "1 3 5 7 9 11 13"
$ spaceOut [1..8]
$ sometimesBy 0.5 (degradeBy 0.5)
$ s "srg*3"
# n 10
# cut (slow 0.11 $ choose [0,1])
# pan (slow 0.13 $ choose [0,0.5,0.5,1])
# lpf (slow 0.1 $ scale 200 20000 $ rand)
# speed (discretise (1/8) $ scale (-4) 1 $ rand)
# shape 0.999999
# up (slow 0.12 $ scale 0 24 $ rand)
# orbit 1
# delay (slow 16 $ scale 0.75 1 $ sine)
# delayfb 1
# delayt (slow 163 $ scalex (1/512) 1 $ sine)
# rel (slow 29 $ scalex 1 5 $ saw)
# accelerate (slow 39 $ scalex 0.0000000000001 0.125 $ saw)
# gain 1.5,
fast "1 1.5 2 3 4 6 8"
$ spaceOut [0.5,0.25,0.125]
$ s "srg"
# n (slow 0.14 $ choose [0,1,5])
# gain (slow 0.16 $ scale 6 12 $ rand)
# pan (discretise (1/2) $ slow 0.15 $ scale 0 1 $ rand)
# rel (slow 0.16 $ scalex 0.1 1 $ saw)
# nudge (discretise (1/13) $ scale 0 3 $ rand)
# up (discretise (1/32) $ choose [-6..6]),
spread _slow ([1,1.1..2]++[2.2,2.4..3]++[3.3,3.6..6])
$ degradeBy 0.125
$ s "sbu*8"
# gain 8
# n 2
# up 36
# pan (slow 29 $ saw)
# rel (slow 30 $ saw)
# orbit (slow 0.17 $ wchoose [10,1][0,1])
# hpf 1000
]

let wchoose weights values = choose $ concatMap (\x -> replicate (fst x) (snd x)) (zip weights values)

d1
$ sometimesBy (1/7) (fast 2)
$ spreadChoose _slow [1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2.0,2.1,2.2,2.3,2.4,2.5]
$ spreadChoose _fast [1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2.0,2.1,2.2,2.3,2.4]
$ sometimesBy (1/3) (fast 2)
$ sometimesBy (1/2) (spread iter [1,2,4,2])
$ sometimesBy (1/4) (fast 2)
$ sometimesBy (1/8) (0.5<~)
$ unwrap (discretise (1/4) $ choose [s"syn*8?",s"syn*7?",s"syn*6?",s"syn*5?",s"syn*4"])
# pan (slow 0.1 $ rand)
# gain (slow 0.11 $ scale 1 8 $ rand)
# rel (slow 0.12 $ scale (1/16) 1 $ rand)
# n (slow 0.13 $ choose[0,1,2,4,5,6,7,8,9,18,19,20,21,100,101,102,103,104,105])
# up (slow 0.14 $ wchoose [11,10,9,8,7,6,5,4,3,2,1][0,2.5,3,4.2,6,8.1,-2.2,-3.7,-4.5,-6.2,-8.1])
# nudge (slow 9 sine)
# cut (slow 0.15 $ wchoose [6,1][0,1])
# delay (slow (512*4) $ scale 0 0.125 $ tri)
# delayfb (slow 0.17 $ wchoose [3,1][0,1])
# delayt (discretise (1/2) $ slow 0.16 $ wchoose [2,1][1/64,1/128] / choose[5..25] * choose[1.125..15.125]
* wchoose[16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1][1..16])
# room (slow 0.17 $ wchoose [1,2][0,1/256])
# size (slow 0.16 $ rand)
# shape (slow 0.18 $ scale 0.5 0.75 $ rand)

let wchoose weights values = choose $ concatMap (\x -> replicate (fst x) (snd x)) (zip weights values)
